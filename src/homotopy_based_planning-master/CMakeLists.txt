cmake_minimum_required(VERSION 2.8.3)
project(homotopy_based_planning)

set(CATKIN_PACKAGES
    arc_utilities
    roscpp
    sdf_tools
    visualization_msgs
)

## Find catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS ${CATKIN_PACKAGES})

## System dependencies are found with CMake's conventions
find_package(cmake_modules REQUIRED)
find_package(Eigen3 REQUIRED)
set(Eigen3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})

find_package(GSL REQUIRED)
find_package(Boost REQUIRED COMPONENTS system filesystem)

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   visualization_msgs
# )

###################################
## catkin specific configuration ##
###################################

catkin_package(
    INCLUDE_DIRS    include
    LIBRARIES       ${PROJECT_NAME}_planar
                    ${PROJECT_NAME}_3d
    CATKIN_DEPENDS  ${CATKIN_PACKAGES}
    DEPENDS         Eigen3
                    GSL
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(include
    SYSTEM
    ${EIGEN3_INCLUDE_DIRS}
    ${catkin_INCLUDE_DIRS}
    ${GSL_INCLUDE_DIRS}
)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -O3 -g -Wall -Wextra -Wpedantic -Wconversion")

unset(USE_OPEN_MP CACHE)
option(USE_OPEN_MP "Set to ON if we want to use OpenMP" ON)
if(USE_OPEN_MP)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp -DUSE_OPEN_MP")
    message(STATUS "Enabling OpenMP for Homotopy Based Planning library")
else(USE_OPEN_MP)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unknown-pragmas")
    message(WARNING "Disabling OpenMP for Homotopy Based Planning library")
endif(USE_OPEN_MP)

## Library file for the whole project
#FILE(GLOB hpp_SRC "include/${PROJECT_NAME}/*.hpp")
#FILE(GLOB h_SRC "include/${PROJECT_NAME}/*.h")
#FILE(GLOB cpp_SRC "src/*.cpp")

add_library(${PROJECT_NAME}_planar include/homotopy_based_planning/planar_rectangles_circles_environment.h src/planar_rectangles_circles_environment.cpp include/homotopy_based_planning/h_signature_astar.hpp)
add_dependencies(${PROJECT_NAME}_planar ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}_planar ${catkin_LIBRARIES})

add_executable(planar_rectangles_circles_node_fig12 nodes/planar_rectangles_circles_node_fig12.cpp)
add_dependencies(planar_rectangles_circles_node_fig12 ${catkin_EXPORTED_TARGETS})
target_link_libraries(planar_rectangles_circles_node_fig12 ${PROJECT_NAME}_planar)

add_executable(planar_rectangles_circles_node_fig13 nodes/planar_rectangles_circles_node_fig13.cpp)
add_dependencies(planar_rectangles_circles_node_fig13 ${catkin_EXPORTED_TARGETS})
target_link_libraries(planar_rectangles_circles_node_fig13 ${PROJECT_NAME}_planar)

add_executable(planar_rectangles_circles_node_fig14 nodes/planar_rectangles_circles_node_fig14.cpp)
add_dependencies(planar_rectangles_circles_node_fig14 ${catkin_EXPORTED_TARGETS})
target_link_libraries(planar_rectangles_circles_node_fig14 ${PROJECT_NAME}_planar)



add_library(${PROJECT_NAME}_3d include/homotopy_based_planning/three_dimensional_environment.h src/three_dimensional_environment.cpp include/homotopy_based_planning/h_signature_astar.hpp)
add_dependencies(${PROJECT_NAME}_3d ${catkin_EXPORTED_TARGETS})
target_link_libraries(${PROJECT_NAME}_3d ${catkin_LIBRARIES} ${GSL_LIBRARIES})

add_executable(three_dimensional_node_fig17a nodes/three_dimensional_node_fig17a.cpp)
add_dependencies(three_dimensional_node_fig17a ${catkin_EXPORTED_TARGETS})
target_link_libraries(three_dimensional_node_fig17a ${PROJECT_NAME}_3d)

add_executable(three_dimensional_node_fig17b nodes/three_dimensional_node_fig17b.cpp)
add_dependencies(three_dimensional_node_fig17b ${catkin_EXPORTED_TARGETS})
target_link_libraries(three_dimensional_node_fig17b ${PROJECT_NAME}_3d)

add_executable(three_dimensional_node_fig18a nodes/three_dimensional_node_fig18a.cpp)
add_dependencies(three_dimensional_node_fig18a ${catkin_EXPORTED_TARGETS})
target_link_libraries(three_dimensional_node_fig18a ${PROJECT_NAME}_3d)

add_executable(three_dimensional_node_fig18b nodes/three_dimensional_node_fig18b.cpp)
add_dependencies(three_dimensional_node_fig18b ${catkin_EXPORTED_TARGETS})
target_link_libraries(three_dimensional_node_fig18b ${PROJECT_NAME}_3d)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_homotopy_based_planning.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
